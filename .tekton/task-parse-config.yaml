---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: parse-config
spec:
  params:
    - name: stage
      description: Parse this section from the config file
    - name: compliance-baseimage
      description: base image to run most of the built-in pipeline code
    - name: pipeline-debug
      description: Use debug mode
      default: "0"

  results:
    - name: image
      description: Docker image to be used in the specified stage.
    - name: script
      description: Location of the script that's going to be used to run the specified stage.
    - name: configmap
      description: "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
    - name: secret
      description: "Name of the `Secret` that's going to be mounted in `run-stage`"
    - name: working-dir
      description: "one-pipeline working dir, the location of one-pipeline.yaml"
    - name: abort-on-failure
      description: "Whether abort the pipeline in case of a failure or not"
    - name: dind
      description: Launch Docker-in-Docker sidecar
    - name: image-pull-policy
      description: Set the imagePullPolicy for the Docker image in the runner task

  workspaces:
    - name: app
      description: Workspace where the application is checked out.

  volumes:
    - name: environment-properties
      configMap:
        name: environment-properties

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: WORKSPACE
        value: $(workspaces.app.path)
      - name: ONE_PIPELINE_PATH
        value: "/opt/one-pipeline"
      - name: STAGE
        value: "$(params.stage)"

  steps:
    - name: parse-config
      image: $(params.compliance-baseimage)
      volumeMounts:
        - name: environment-properties
          mountPath: /config
      script: |
        #!/bin/bash

        . "${ONE_PIPELINE_PATH}"/internal/stage/parse_config

        echo -n "${STAGE_IMAGE}" > "$(results.image.path)"
        echo -n "${STAGE_SCRIPT_PATH}" > "$(results.script.path)"
        echo -n "${STAGE_DIND}" > "$(results.dind.path)"
        echo -n "${STAGE_ABORT_ON_FAILURE}" > "$(results.abort-on-failure.path)"
        echo -n "${STAGE_IMAGE_PULL_POLICY}" > "$(results.image-pull-policy.path)"
        echo -n "${STAGE_CONFIGMAP}" > "$(results.configmap.path)"
        echo -n "${STAGE_SECRET}" > "$(results.secret.path)"
