---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-stage
spec:
  params:
    - name: image
      description: Docker image to be used to run the stage script.
    - name: script
      description: Location of the script that is used to run the stage.
    - name: working-dir
      description: Used as `workingDir` for the stage step.
    - name: params
      description: "Extra parameters (`key: value` pairs)."
      default: ""
    - name: configmap-0
      description: "Name of a `ConfigMap` that's going to be mounted."
      default: 'not-provided-configmap-0'
    - name: configmap-1
      description: "Name of a `ConfigMap` that's going to be mounted."
      default: 'not-provided-configmap-1'
    - name: configmap-2
      description: "Name of a `ConfigMap` that's going to be mounted."
      default: 'not-provided-configmap-2'
    - name: configmap-3
      description: "Name of a `ConfigMap` that's going to be mounted."
      default: 'not-provided-configmap-3'
    - name: configmap-4
      description: "Name of a `ConfigMap` that's going to be mounted."
      default: 'not-provided-configmap-4'
    - name: secret-0
      description: "Name of a `Secret` that's goint to be mounted."
      default: 'not-provided-secret-0'
    - name: secret-1
      description: "Name of a `Secret` that's goint to be mounted."
      default: 'not-provided-secret-1'
    - name: secret-2
      description: "Name of a `Secret` that's goint to be mounted."
      default: 'not-provided-secret-2'
    - name: secret-3
      description: "Name of a `Secret` that's goint to be mounted."
      default: 'not-provided-secret-3'
    - name: secret-4
      description: "Name of a `Secret` that's goint to be mounted."
      default: 'not-provided-secret-4'
    - name: abort-on-failure
      description: "Whether abort the pipeline in case of a failure or not"
    - name: pipeline-debug
      description: Use debug mode
      default: "0"

  results:
    - name: exit-code
      description: Exit code of the stage script.
    - name: status
      description: Stage status, which is `success` or `failure`, depending on the stage script exit code.

  workspaces:
    - name: app
      description: Workspace where the application is checked out.

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: prepare
      image: ibmcom/pipeline-base-image:2.7
      volumeMounts:
        - name: config
          mountPath: /config
        - name: environment-properties
          mountPath: /config/environment-properties
        - name: secure-properties
          mountPath: /config/secure-properties
        - name: configmap-0
          mountPath: /config/$(params.configmap-0)
        - name: configmap-1
          mountPath: /config/$(params.configmap-1)
        - name: configmap-2
          mountPath: /config/$(params.configmap-2)
        - name: configmap-3
          mountPath: /config/$(params.configmap-3)
        - name: configmap-4
          mountPath: /config/$(params.configmap-4)
        - name: secret-0
          mountPath: /config/$(params.secret-0)
        - name: secret-1
          mountPath: /config/$(params.secret-1)
        - name: secret-2
          mountPath: /config/$(params.secret-2)
        - name: secret-3
          mountPath: /config/$(params.secret-3)
        - name: secret-4
          mountPath: /config/$(params.secret-4)
      script: |
        #!/usr/bin/env bash

        set -e

        if [[ "$PIPELINE_DEBUG" == 1 ]]; then
          set -x
          trap env EXIT
        fi

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/environment-properties' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/secure-properties' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.configmap-0)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.configmap-1)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.configmap-2)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.configmap-3)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.configmap-4)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.secret-0)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.secret-1)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.secret-2)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.secret-3)' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/$(params.secret-4)' -type f)

        extra_params=$(mktemp)
        cat <<'EOF' > "$extra_params"
        ---
        $(params.params)
        EOF

        while read -ra pair; do
          echo -n "${pair[1]}" > "/config/${pair[0]}"
        done < <(yq r -j "$extra_params" | jq -r 'select(.) | to_entries[] | .key + " " + .value')

    - name: run-stage
      image: $(params.image)
      workingDir: $(workspaces.app.path)/$(params.working-dir)
      volumeMounts:
        - name: config
          mountPath: /config
        - name: environment-properties
          mountPath: /config/environment-properties
        - name: secure-properties
          mountPath: /config/secure-properties
        - name: configmap-0
          mountPath: /config/$(params.configmap-0)
        - name: configmap-1
          mountPath: /config/$(params.configmap-1)
        - name: configmap-2
          mountPath: /config/$(params.configmap-2)
        - name: configmap-3
          mountPath: /config/$(params.configmap-3)
        - name: configmap-4
          mountPath: /config/$(params.configmap-4)
        - name: secret-0
          mountPath: /config/$(params.secret-0)
        - name: secret-1
          mountPath: /config/$(params.secret-1)
        - name: secret-2
          mountPath: /config/$(params.secret-2)
        - name: secret-3
          mountPath: /config/$(params.secret-3)
        - name: secret-4
          mountPath: /config/$(params.secret-4)
      env:
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: PIPELINE_RUN_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      script: |
        #!/bin/sh

        # run the stage script
        if $(workspaces.app.path)/$(params.script); then
          echo -n $? > $(results.exit-code.path)
          echo -n success > $(results.status.path)
        else
          echo -n $? > $(results.exit-code.path)
          echo -n failure > $(results.status.path)
          if [ "$(params.abort-on-failure)" = "true" ]; then
            exit 1
          fi
        fi

  volumes:
    - name: config
      emptyDir: {}
    - name: environment-properties
      configMap:
        name: environment-properties
    - name: secure-properties
      secret:
        secretName: secure-properties
    - name: configmap-0
      configMap:
        name: $(params.configmap-0)
        optional: true
    - name: configmap-1
      configMap:
        name: $(params.configmap-1)
        optional: true
    - name: configmap-2
      configMap:
        name: $(params.configmap-2)
        optional: true
    - name: configmap-3
      configMap:
        name: $(params.configmap-3)
        optional: true
    - name: configmap-4
      configMap:
        name: $(params.configmap-4)
        optional: true
    - name: secret-0
      secret:
        secretName: $(params.secret-0)
        optional: true
    - name: secret-1
      secret:
        secretName: $(params.secret-1)
        optional: true
    - name: secret-2
      secret:
        secretName: $(params.secret-2)
        optional: true
    - name: secret-3
      secret:
        secretName: $(params.secret-3)
        optional: true
    - name: secret-4
      secret:
        secretName: $(params.secret-4)
        optional: true
