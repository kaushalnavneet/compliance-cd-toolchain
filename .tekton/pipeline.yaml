---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the git repo
      default: master
    - name: servicenow-api-base-url
      description: The ServiceNow API Base URL you wish to use (test or live)
    - name: servicenow-configuration-item
      description: The name of the service to be deployed as it is registered in ServiceNow
    - name: cluster
      description: iks cluster name
    - name: cluster-region
      description: iks cluster region
    - name: cluster-namespace
      description: iks cluster namespace
    - name: doi-toolchain-id
      description: toolchain ID
    - name: application
      description: application name
    - name: emergency-label
      description: emergency label for change request generation
    - name: evidence-locker-url
      description: evidence locker repo
    - name: incident-issues-url
      description: incident issues repo
    - name: change-request-id
      description: optional ServiceNow Change Request ID
      default: "notAvailable"
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
    - name: slack-notifications
      description: toggles slack notifications

  workspaces:
    - name: artifacts

  tasks:
    - name: prod-notify-pipeline-start
      conditions:
        - conditionRef: util-is-equal
          params:
            - name: left
              value: $(params.slack-notifications)
            - name: right
              value: "1"
      taskRef:
        name: slack-post-message
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3
              import os
              print("CD Pipeline was triggered!")
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + "|See the Pipeline Logs>")

    - name: setup
      params:
        - name: repository
          value: $(params.repository)
        - name: evidence-locker-url
          value: $(params.evidence-locker-url)
        - name: incident-issues-url
          value: $(params.incident-issues-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      taskSpec:
        params:
          - name: repository
          - name: evidence-locker-url
          - name: incident-issues-url
          - name: pipeline-debug
        results:
          - name: repository
          - name: evidence-locker-url
          - name: incident-issues-url
          - name: pipeline-run-id
        stepTemplate:
          env:
            - name: PIPELINE_DEBUG
              value: $(params.pipeline-debug)
            - name: PIPELINE_RUN_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        steps:
          - name: setup
            image: ibmcom/pipeline-base-image:2.6
            script: |
              #!/bin/bash

              set -e -o pipefail

              if [ $PIPELINE_DEBUG == 1 ]; then
                pwd
                env
                trap env EXIT
                set -x
              fi

              REPOSITORY=$(echo -n "$(params.repository)" | sed 's:/*$::')
              EVIDENCE_URL=$(echo -n "$(params.evidence-locker-url)" | sed 's:/*$::')
              INCIDENT_ISSUES_URL=$(echo -n "$(params.incident-issues-url)" | sed 's:/*$::')
              echo -n "$REPOSITORY" | tee "$(results.repository.path)"
              echo -n "$EVIDENCE_URL" | tee "$(results.evidence-locker-url.path)"
              echo -n "$INCIDENT_ISSUES_URL" | tee "$(results.incident-issues-url.path)"
              echo -n "$PIPELINE_RUN_ID" | tee "$(results.pipeline-run-id.path)"

    - name: prod-get-git-credentials
      runAfter:
        - setup
      taskRef:
        name: git-get-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.setup.results.repository)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-clone-evidence-repo
      taskRef:
        name: git-clone
      runAfter:
        - prod-get-git-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.setup.results.evidence-locker-url)
        - name: branch
          value: "master"
        - name: git-user
          value: $(tasks.prod-get-git-credentials.results.git-auth-user)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-clone-repo
      taskRef:
        name: git-clone
      runAfter:
        - prod-clone-evidence-repo
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.setup.results.repository)
        - name: branch
          value: $(params.revision)
        - name: git-user
          value: $(tasks.prod-get-git-credentials.results.git-auth-user)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-get-deployment-app
      taskRef:
        name: get-deployment-app
      runAfter:
        - prod-clone-repo
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-directory
          value: "$(tasks.prod-clone-repo.results.directory-name)"
        - name: deployment-file
          value: "deployment.yml"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-clone-inventory-repo
      taskRef:
        name: git-clone-inventory-repo
      runAfter:
        - prod-clone-repo
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: app-name
          value: $(params.application)
        - name: git-auth-user
          value: $(tasks.prod-get-git-credentials.results.git-auth-user)

    - name: prod-get-evidence-locker-path
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: .services[] | select(.toolchain_binding.name=="evidence-locker-repo") | .parameters.repo_name
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-get-toolchain-crn
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: .crn
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-inventory-get-evidence-path
      taskRef:
        name: inventory-get-pipeline-run-id
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: app-name
          value: $(params.application)
        - name: inventory-folder
          value: $(tasks.prod-clone-inventory-repo.results.inventory-folder)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-inventory-get-build-number
      taskRef:
        name: inventory-get-build-number
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: app-name
          value: $(params.application)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-evidence-summary-create
      taskRef:
        name: evidence-summarize
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: path-list
          value: ci/$(tasks.prod-inventory-get-evidence-path.results.pipeline-run-id)
        - name: toolchain-crn
          value: $(tasks.prod-get-toolchain-crn.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-evidence-summary-format
      runAfter:
        - prod-evidence-summary-create
      taskRef:
        name: evidence-format-summary
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: summary-path
          value: $(tasks.prod-evidence-summary-create.results.summary-path)

    - name: prod-change-request-deployment-ready
      runAfter:
        - prod-evidence-summary-create
      taskRef:
        name: summary-to-deployment-ready
      params:
        - name: failure-count
          value: $(tasks.prod-evidence-summary-create.results.failure-count)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-change-request-create-urls
      params:
        - name: servicenow-api-base-url
          value: $(params.servicenow-api-base-url)
      taskSpec:
        params:
          - name: servicenow-api-base-url
        results:
          - name: change-request-url
          - name: servicenow-api-url
        steps:
          - name: create-change-request-urls
            image: ibmcom/pipeline-base-image:2.6
            env:
              - name: CHANGE_API_PATH
                value: "api/ibmwc/change"
              - name: CHANGE_REQUEST_URL_PATH
                value: "nav_to.do?uri=change_request.do?sys_id="
              - name: SERVICENOW_BASE_URL
                value: $(params.servicenow-api-base-url)
            script: |
              echo -n "${SERVICENOW_BASE_URL}/${CHANGE_REQUEST_URL_PATH}" > $(results.change-request-url.path)
              echo -n "${SERVICENOW_BASE_URL}/${CHANGE_API_PATH}" > $(results.servicenow-api-url.path)

    - name: prod-change-request-create
      taskRef:
        name: servicenow-create-change-request
      runAfter:
        - prod-get-git-credentials
        - prod-clone-inventory-repo
        - prod-change-request-create-urls
        - prod-change-request-deployment-ready
      workspaces:
        - name: dynamic-secrets
          workspace: artifacts
        - name: artifacts
          workspace: artifacts
      params:
        - name: application
          value: "$(tasks.prod-get-deployment-app.results.app-name)"
        - name: repository
          value: $(tasks.setup.results.repository)
        - name: servicenow-api-url
          value: $(tasks.prod-change-request-create-urls.results.servicenow-api-url)
        - name: servicenow-configuration-item
          value: $(params.servicenow-configuration-item)
        - name: registry-url
          value: $(tasks.prod-clone-inventory-repo.results.registry-url)
        - name: registry-namespace
          value: $(tasks.prod-clone-inventory-repo.results.registry-namespace)
        - name: image-name
          value: $(tasks.prod-clone-inventory-repo.results.image-name)
        - name: image-tag
          value: $(tasks.prod-clone-inventory-repo.results.image-tag)
        - name: cluster
          value: $(params.cluster)
        - name: cluster-region
          value: $(params.cluster-region)
        - name: cluster-namespace
          value: $(params.cluster-namespace)
        - name: emergency-label
          value: $(params.emergency-label)
        - name: evidence-locker-url
          value: $(tasks.setup.results.evidence-locker-url)
        - name: change-request-id
          value: $(params.change-request-id)
        - name: change-request-url
          value: $(tasks.prod-change-request-create-urls.results.change-request-url)
        - name: collect-evidence
          value: "true"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: formatted-summary-path
          value: $(tasks.prod-evidence-summary-format.results.formatted-summary-path)
        - name: servicenow-deployment-ready
          value: $(tasks.prod-change-request-deployment-ready.results.deployment-ready)

    - name: prod-inventory-add-change-request
      taskRef:
        name: inventory-cr-add
      runAfter:
        - prod-change-request-create
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)
        - name: application
          value: $(params.application)
        - name: inventory-folder
          value: $(tasks.prod-clone-inventory-repo.results.inventory-folder)

    - name: prod-change-request-check-approval
      taskRef:
        name: servicenow-check-change-request-approval
      runAfter:
        - prod-inventory-add-change-request
      workspaces:
        - name: dynamic-secrets
          workspace: artifacts
      params:
        - name: servicenow-api-url
          value: $(tasks.prod-change-request-create-urls.results.servicenow-api-url)
        - name: evidence-locker-url
          value: $(tasks.setup.results.evidence-locker-url)
        - name: collect-evidence
          value: "true"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)

    - name: prod-create-namespace
      taskRef:
        name: iks-create-namespace
      runAfter:
        - prod-change-request-check-approval
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: cluster-name
          value: $(params.cluster)
        - name: cluster-region
          value: $(params.cluster-region)
        - name: cluster-namespace
          value: $(params.cluster-namespace)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-create-image-pull-secrets
      taskRef:
        name: iks-create-pull-secrets
      runAfter:
        - prod-create-namespace
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: cluster-name
          value: $(params.cluster)
        - name: cluster-region
          value: $(params.cluster-region)
        - name: cluster-namespace
          value: $(params.cluster-namespace)
        - name: registry-url
          value: $(tasks.prod-clone-inventory-repo.results.registry-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-deployment
      taskRef:
        name: iks-deploy
      runAfter:
        - prod-clone-repo
        - prod-create-image-pull-secrets
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: cluster-name
          value: $(params.cluster)
        - name: cluster-region
          value: $(params.cluster-region)
        - name: cluster-namespace
          value: $(params.cluster-namespace)
        - name: allow-create-route
          value: "false"
        - name: registry-url
          value: $(tasks.prod-clone-inventory-repo.results.registry-url)
        - name: registry-namespace
          value: $(tasks.prod-clone-inventory-repo.results.registry-namespace)
        - name: image-name
          value: $(tasks.prod-clone-inventory-repo.results.image-name)
        - name: image-tag
          value: $(tasks.prod-clone-inventory-repo.results.image-tag)
        - name: app-directory
          value: $(tasks.prod-clone-repo.results.directory-name)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-acceptance-tests
      runAfter:
        - prod-deployment
      taskRef:
        name: util-run
      workspaces:
        - name: scripts
          workspace: artifacts
      params:
        - name: script
          value: |
            #!/bin/bash
            APP_URL="$(tasks.prod-deployment.results.app-url)"
            . /root/.nvm/nvm.sh
            cd /scripts/"$(tasks.prod-clone-repo.results.directory-name)" || exit
            npm ci -q
            export APP_URL
            npm run acceptance-test

    - name: prod-acceptance-tests-create-issue
      runAfter:
        - prod-acceptance-tests
      taskRef:
        name: evidence-create-incident-issue
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repository
          value: $(params.repository)
        - name: incident-issue-repo
          value: $(params.incident-issues-url)
        - name: task-name
          value: "prod-acceptance-tests"
        - name: result-status
          value: $(tasks.prod-acceptance-tests.results.status)
        - name: commit-hash
          value: $(params.revision)

    - name: prod-acceptance-tests-create-evidence
      taskRef:
        name: evidence-add
      retries: 2
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: namespace
          value: "cd"
        - name: evidence-name
          value: "acceptance-test"
        - name: toolchain-crn
          value: $(tasks.prod-get-toolchain-crn.results.extracted-value)
        - name: evidence-type
          value: "com.ibm.acceptance_test"
        - name: evidence-type-version
          value: "1.0.0"
        - name: result
          value: $(tasks.prod-acceptance-tests.results.status)
        - name: issues
          value: |
            "$(tasks.prod-acceptance-tests-create-issue.results.issue-url)"

    - name: prod-acceptance-tests-create-doi-data
      runAfter:
        - prod-acceptance-tests
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "Acceptance tests"
        - name: task-name
          value: "prod-acceptance-tests"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.prod-acceptance-tests.results.status)
        - name: toolchain-id
          value: $(params.doi-toolchain-id)
        - name: ibmcloud-api-key-secret-key
          value: "ibmcloud-api-key"

    - name: prod-acceptance-tests-results-to-doi
      runAfter:
        - prod-acceptance-tests-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: $(params.application)
        - name: file-locations
          value: $(tasks.prod-acceptance-tests-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.prod-acceptance-tests-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "ibmcloud-api-key"
        - name: toolchain-id
          value: $(params.doi-toolchain-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-publish-deployrecord
      taskRef:
        name: doi-publish-deployrecord
      runAfter:
        - prod-deployment
        - prod-inventory-get-build-number
      params:
        - name: app-name
          value: "$(params.application)"
        - name: toolchain-id
          value: "$(params.doi-toolchain-id)"
        - name: build-number
          value: "$(tasks.prod-inventory-get-build-number.results.build-number)"
        - name: environment
          value: "prod"
        - name: app-url
          value: "$(tasks.prod-deployment.results.app-url)"
        - name: pipeline-debug
          value: "$(params.pipeline-debug)"
        - name: toolchain-apikey-secret-key
          value: "ibmcloud-api-key"

    - name: prod-change-request-close-get-evidence-summary
      taskRef:
        name: evidence-summarize
      runAfter:
        - prod-acceptance-tests-create-evidence
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: path-list
          value: "ci/$(tasks.prod-inventory-get-evidence-path.results.pipeline-run-id)cd/$(tasks.setup.results.pipeline-run-id)"
        - name: toolchain-crn
          value: $(tasks.prod-get-toolchain-crn.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-change-request-close-format-summary
      runAfter:
        - prod-change-request-close-get-evidence-summary
      taskRef:
        name: evidence-format-summary
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: summary-path
          value: $(tasks.prod-change-request-close-get-evidence-summary.results.summary-path)

    - name: prod-evidence-summary-upload
      taskRef:
        name: evidence-upload-summary
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: evidence-summary-path
          value: "$(tasks.prod-change-request-close-get-evidence-summary.results.summary-path)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-inventory-merge-change-request-branch
      taskRef:
        name: inventory-apply
      runAfter:
        - prod-deployment
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)
        - name: inventory-folder
          value: $(tasks.prod-clone-inventory-repo.results.inventory-folder)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-close-change-request
      taskRef:
        name: servicenow-close-change-request
      runAfter:
        - prod-inventory-merge-change-request-branch
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: dynamic-secrets
          workspace: artifacts
      params:
        - name: close-category-script
          value:
            |
            #!/bin/bash
            CLOSE_CATEGORY="successful"

            if [ "$(tasks.prod-change-request-close-get-evidence-summary.results.failure-count)" -gt 0 ]; then
              CLOSE_CATEGORY="successful_issues"
            fi

            echo -n "$CLOSE_CATEGORY"

        - name: close-notes-script
          value:
            |
            #!/bin/bash

            CLOSE_ISSUES=""
            if [ "$(tasks.prod-change-request-close-get-evidence-summary.results.failure-count)" -gt 0 ]; then
              CLOSE_ISSUES="but some checks failed during build or deployment. See summary for more details!"
            fi

            SUMMARY="$(cat ./$(tasks.prod-change-request-close-format-summary.results.formatted-summary-path))"

            printf "Deployed successful %s\n\nUPDATED EVIDENCE SUMMARY: \n\n%s" "$CLOSE_ISSUES" "$SUMMARY"

        - name: servicenow-api-url
          value: $(tasks.prod-change-request-create-urls.results.servicenow-api-url)
        - name: evidence-locker-url
          value: $(tasks.setup.results.evidence-locker-url)
        - name: collect-evidence
          value: "true"
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-notify-pipeline-end
      conditions:
        - conditionRef: util-is-equal
          params:
            - name: left
              value: $(params.slack-notifications)
            - name: right
              value: "1"
      taskRef:
        name: slack-post-message
      runAfter:
        - prod-close-change-request
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3
              import os
              print("CD Pipeline finished!")
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + "|See the Pipeline Logs>")
