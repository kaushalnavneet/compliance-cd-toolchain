---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  params:
    - name: servicenow-api-base-url
      description: The ServiceNow API Base URL you wish to use (test or live)
    - name: servicenow-configuration-item
      description: The name of the service to be deployed as it is registered in ServiceNow
    - name: cluster
      description: iks cluster name
    - name: cluster-region
      description: iks cluster region
    - name: cluster-namespace
      description: iks cluster namespace
    - name: doi-toolchain-id
      description: toolchain ID
    - name: application
      description: application name
    - name: emergency-label
      description: emergency label for change request generation
    - name: change-request-id
      description: optional ServiceNow Change Request ID
      default: "notAvailable"
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
    - name: slack-notifications
      description: toggles slack notifications
    - name: cos-bucket-name
      description: Bucket name in your Cloud Object Storage instance, used as an Evidence Locker
      default: ""
    - name: cos-endpoint
      description: Endpoint of your Cloud Object Storage instance, used as an Evidence Locker
      default: ""
    - name: one-pipeline-config
      description: Configuration file to be used to customize pipeline behavior
      default: .one-pipeline.yaml

  workspaces:
    - name: artifacts

  tasks:

    - name: prod-notify-pipeline-start
      when:
        - input: $(params.slack-notifications)
          operator: in
          values: ["1"]
      taskRef:
        name: slack-post-message
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3
              import os
              print("CD Pipeline was triggered!")
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + "|See the Pipeline Logs>")

    - name: prod-extract-evidence-locker-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: '.services[] | select(.toolchain_binding.name=="evidence-locker-repo") | .dashboard_url'
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-extract-incident-issues-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: '.services[] | select(.toolchain_binding.name=="incident-issues-repo") | .dashboard_url'
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-extract-inventory-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: '.services[] | select(.toolchain_binding.name=="inventory-repo") | .dashboard_url'
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: setup
      params:
        - name: evidence-locker-url
          value: $(tasks.prod-extract-evidence-locker-url.results.extracted-value)
        - name: incident-issues-url
          value: $(tasks.prod-extract-incident-issues-url.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: inventory-url
          value: $(tasks.prod-extract-inventory-url.results.extracted-value)
      taskSpec:
        params:
          - name: evidence-locker-url
          - name: incident-issues-url
          - name: inventory-url
          - name: pipeline-debug
        results:
          - name: evidence-locker-url
          - name: incident-issues-url
          - name: inventory-url
          - name: pipeline-run-id
          - name: inventory-repo-owner
          - name: inventory-repo-name
        stepTemplate:
          env:
            - name: PIPELINE_DEBUG
              value: $(params.pipeline-debug)
            - name: PIPELINE_RUN_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        steps:
          - name: setup
            image: ibmcom/pipeline-base-image:2.6
            script: |
              #!/bin/bash

              set -e -o pipefail

              if [ $PIPELINE_DEBUG == 1 ]; then
                pwd
                env
                trap env EXIT
                set -x
              fi

              EVIDENCE_URL=$(echo -n "$(params.evidence-locker-url)" | sed 's:/*$::')
              INCIDENT_ISSUES_URL=$(echo -n "$(params.incident-issues-url)" | sed 's:/*$::')
              INVENTORY_URL=$(echo -n "$(params.inventory-url)" | sed 's:/*$::')
              echo -n "$EVIDENCE_URL" | tee "$(results.evidence-locker-url.path)"
              echo -n "$INCIDENT_ISSUES_URL" | tee "$(results.incident-issues-url.path)"
              echo -n "$INVENTORY_URL" | tee "$(results.inventory-url.path)"
              echo -n "$PIPELINE_RUN_ID" | tee "$(results.pipeline-run-id.path)"

              IFS='/'
              read -ra ADDR <<<"$INVENTORY_URL"
              echo -n "${ADDR[${#ADDR[@]} - 1]}" | tee "$(results.inventory-repo-name.path)"
              echo -n "${ADDR[${#ADDR[@]} - 2]}" | tee "$(results.inventory-repo-owner.path)"

    - name: prod-get-git-credentials
      runAfter:
        - setup
      taskRef:
        name: git-get-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.setup.results.inventory-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-clone-evidence-repo
      taskRef:
        name: git-clone
      runAfter:
        - prod-get-git-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.setup.results.evidence-locker-url)
        - name: branch
          value: "master"
        - name: git-user
          value: $(tasks.prod-get-git-credentials.results.git-auth-user)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-clone-inventory-repo
      taskRef:
        name: git-clone
      runAfter:
        - prod-clone-evidence-repo
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.setup.results.inventory-url)
        - name: branch
          value: "master"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: git-user
          value: $(tasks.prod-get-git-credentials.results.git-auth-user)

    - name: prod-inventory-get-image
      taskRef:
        name: inventory-get
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: name
          value: $(params.application)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: property
          value: artifact
        - name: target
          value: prod_candidate
        - name: inventory-url
          value: $(tasks.prod-clone-inventory-repo.results.git-url)

    - name: prod-parse-image-name
      runAfter:
        - prod-inventory-get-image
      params:
        - name: image-url
          value: $(tasks.prod-inventory-get-image.results.value)
      workspaces:
        - name: artifacts
          workspace: artifacts
      taskSpec:
        params:
          - name: image-url
        results:
          - name: registry-url
            description: the image registry url
          - name: registry-namespace
            description: the image registry namespace
          - name: image-name
            description: the built docker image name
          - name: image-tag
            description: the docker image tag, containing the commit hash
        workspaces:
          - name: artifacts
        steps:
          - name: parse-image
            image: ibmcom/pipeline-base-image:2.6
            script: |
              #!/bin/bash

              set -e -o pipefail;

              if [ "$PIPELINE_DEBUG" = 1 ]; then
                env
                cat /cd-config/toolchain.json
                trap env EXIT
                set -x
              fi

              REGISTRY_URL=$(echo "$(params.image-url)" | cut -f1 -d/)
              REGISTRY_NAMESPACE=$(echo "$(params.image-url)" | cut -f2 -d/)
              IMAGE_NAME=$(echo "$(params.image-url)" | cut -f1 -d: | cut -f3 -d/)
              IMAGE_TAG=$(echo "$(params.image-url)" | cut -f2 -d:)

              echo -n "$REGISTRY_URL" > $(results.registry-url.path)
              echo -n "$REGISTRY_NAMESPACE" > $(results.registry-namespace.path)
              echo -n "$IMAGE_NAME" > $(results.image-name.path)
              echo -n "$IMAGE_TAG" > $(results.image-tag.path)

    - name: prod-inventory-get-repository
      taskRef:
        name: inventory-get
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: name
          value: $(params.application)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: property
          value: repository_url
        - name: target
          value: prod_candidate
        - name: inventory-url
          value: $(tasks.prod-clone-inventory-repo.results.git-url)

    - name: prod-inventory-get-commit
      taskRef:
        name: inventory-get
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: name
          value: $(params.application)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: property
          value: commit_sha
        - name: target
          value: prod_candidate
        - name: inventory-url
          value: $(tasks.prod-clone-inventory-repo.results.git-url)

    - name: prod-clone-repo
      taskRef:
        name: git-clone
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.prod-inventory-get-repository.results.value)
        - name: revision
          value: $(tasks.prod-inventory-get-commit.results.value)
        - name: git-user
          value: $(tasks.prod-get-git-credentials.results.git-auth-user)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-get-evidence-locker-path
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: .services[] | select(.toolchain_binding.name=="evidence-locker-repo") | .parameters.repo_name
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-get-toolchain-crn
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: .crn
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-inventory-get-evidence-path
      taskRef:
        name: inventory-get
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: name
          value: $(params.application)
        - name: property
          value: "pipeline_run_id"
        - name: target
          value: "prod_candidate"
        - name: inventory-url
          value: $(tasks.prod-clone-inventory-repo.results.git-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-inventory-get-build-number
      taskRef:
        name: inventory-get
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: name
          value: $(params.application)
        - name: property
          value: "build_number"
        - name: target
          value: "prod_candidate"
        - name: inventory-url
          value: $(tasks.prod-clone-inventory-repo.results.git-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-evidence-summary-create
      taskRef:
        name: evidence-summarize
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: path-list
          value: ci/$(tasks.prod-inventory-get-evidence-path.results.value)
        - name: toolchain-crn
          value: $(tasks.prod-get-toolchain-crn.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-evidence-summary-format
      runAfter:
        - prod-evidence-summary-create
      taskRef:
        name: evidence-summary-format
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: summary-path
          value: $(tasks.prod-evidence-summary-create.results.summary-path)

    - name: prod-change-request-deployment-ready
      runAfter:
        - prod-evidence-summary-create
      taskRef:
        name: summary-to-deployment-ready
      params:
        - name: failure-count
          value: $(tasks.prod-evidence-summary-create.results.failure-count)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-change-request-create-urls
      params:
        - name: servicenow-api-base-url
          value: $(params.servicenow-api-base-url)
      taskSpec:
        params:
          - name: servicenow-api-base-url
        results:
          - name: change-request-url
          - name: servicenow-api-url
        steps:
          - name: create-change-request-urls
            image: ibmcom/pipeline-base-image:2.6
            env:
              - name: CHANGE_API_PATH
                value: "api/ibmwc/change"
              - name: CHANGE_REQUEST_URL_PATH
                value: "nav_to.do?uri=change_request.do?sys_id="
              - name: SERVICENOW_BASE_URL
                value: $(params.servicenow-api-base-url)
            script: |
              echo -n "${SERVICENOW_BASE_URL}/${CHANGE_REQUEST_URL_PATH}" > $(results.change-request-url.path)
              echo -n "${SERVICENOW_BASE_URL}/${CHANGE_API_PATH}" > $(results.servicenow-api-url.path)

    - name: prod-inventory-changelog-from
      taskRef:
        name: inventory-get
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: name
          value: $(params.application)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: property
          value: commit_sha
        - name: target
          value: prod
        - name: inventory-url
          value: $(tasks.prod-clone-inventory-repo.results.git-url)
        - name: allow-default-value
          value: "true"
        - name: default-value
          value: ""

    - name: prod-inventory-changelog-to
      taskRef:
        name: inventory-get
      runAfter:
        - prod-clone-inventory-repo
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: name
          value: $(params.application)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: property
          value: commit_sha
        - name: target
          value: prod_candidate
        - name: inventory-url
          value: $(tasks.prod-clone-inventory-repo.results.git-url)

    - name: prod-change-request-prepare
      taskRef:
        name: servicenow-prepare-change-request
      runAfter:
        - prod-get-git-credentials
        - prod-parse-image-name
        - prod-change-request-create-urls
        - prod-change-request-deployment-ready
        - prod-inventory-changelog-to
        - prod-inventory-changelog-from
      workspaces:
        - name: dynamic-secrets
          workspace: artifacts
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.prod-inventory-get-repository.results.value)
        - name: inventory-repo-name
          value: $(tasks.setup.results.inventory-repo-name)
        - name: inventory-repo-owner
          value: $(tasks.setup.results.inventory-repo-owner)
        - name: git-commit-from
          value: $(tasks.prod-inventory-changelog-from.results.value)
        - name: git-commit-to
          value: $(tasks.prod-inventory-changelog-to.results.value)
        - name: servicenow-configuration-item
          value: $(params.servicenow-configuration-item)
        - name: registry-url
          value: $(tasks.prod-parse-image-name.results.registry-url)
        - name: registry-namespace
          value: $(tasks.prod-parse-image-name.results.registry-namespace)
        - name: image-name
          value: $(tasks.prod-parse-image-name.results.image-name)
        - name: image-tag
          value: $(tasks.prod-parse-image-name.results.image-tag)
        - name: cluster
          value: $(params.cluster)
        - name: cluster-region
          value: $(params.cluster-region)
        - name: cluster-namespace
          value: $(params.cluster-namespace)
        - name: inventory-name
          value: $(params.application)
        - name: inventory-target
          value: prod_candidate
        - name: inventory-folder
          value: $(tasks.prod-clone-inventory-repo.results.directory-name)
        - name: emergency-label
          value: $(params.emergency-label)
        - name: change-request-id
          value: $(params.change-request-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: formatted-summary-path
          value: $(tasks.prod-evidence-summary-format.results.formatted-summary-path)
        - name: evidence-failure-count
          value: $(tasks.prod-evidence-summary-create.results.failure-count)

    - name: prod-change-request-create
      taskRef:
        name: servicenow-create-change-request
      runAfter:
        - prod-change-request-prepare
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: cr-json-path
          value: $(tasks.prod-change-request-prepare.results.change-request-json-path)
        - name: change-request-url
          value: $(tasks.prod-change-request-create-urls.results.change-request-url)
        - name: servicenow-api-url
          value: $(tasks.prod-change-request-create-urls.results.servicenow-api-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-inventory-add-change-request
      taskRef:
        name: inventory-cr-add
      runAfter:
        - prod-change-request-create
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)
        - name: application
          value: $(params.application)
        - name: inventory-folder
          value: $(tasks.prod-clone-inventory-repo.results.directory-name)

    - name: prod-change-request-check-approval
      taskRef:
        name: servicenow-check-change-request-approval
      runAfter:
        - prod-inventory-add-change-request
      workspaces:
        - name: dynamic-secrets
          workspace: artifacts
      params:
        - name: servicenow-api-url
          value: $(tasks.prod-change-request-create-urls.results.servicenow-api-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)

    - name: prod-change-request-change-state-to-implement
      taskRef:
        name: servicenow-change-state-to-implement
      runAfter:
        - prod-change-request-check-approval
      params:
        - name: servicenow-api-url
          value: $(tasks.prod-change-request-create-urls.results.servicenow-api-url)
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-normalize-config
      runAfter:
        - prod-clone-repo
      taskRef:
        name: normalize-config
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: working-dir
          value: $(tasks.prod-clone-repo.results.directory-name)
        - name: file
          value: $(params.one-pipeline-config)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-deployment-config
      runAfter:
        - prod-normalize-config
      taskRef:
        name: parse-config
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: stage
          value: deploy
        - name: file
          value: $(tasks.prod-clone-repo.results.directory-name)/$(params.one-pipeline-config)

    - name: prod-deployment
      taskRef:
        name: run-stage
      runAfter:
        - prod-change-request-change-state-to-implement
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: image
          value: $(tasks.prod-deployment-config.results.image)
        - name: script
          value: $(tasks.prod-deployment-config.results.script)
        - name: working-dir
          value: $(tasks.prod-clone-repo.results.directory-name)
        - name: configmap-0
          value: $(tasks.prod-deployment-config.results.configmap-0)
        - name: configmap-1
          value: $(tasks.prod-deployment-config.results.configmap-1)
        - name: configmap-2
          value: $(tasks.prod-deployment-config.results.configmap-2)
        - name: configmap-3
          value: $(tasks.prod-deployment-config.results.configmap-3)
        - name: configmap-4
          value: $(tasks.prod-deployment-config.results.configmap-4)
        - name: secret-0
          value: $(tasks.prod-deployment-config.results.secret-0)
        - name: secret-1
          value: $(tasks.prod-deployment-config.results.secret-1)
        - name: secret-2
          value: $(tasks.prod-deployment-config.results.secret-2)
        - name: secret-3
          value: $(tasks.prod-deployment-config.results.secret-3)
        - name: secret-4
          value: $(tasks.prod-deployment-config.results.secret-4)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: params
          value: |
            image: $(tasks.prod-inventory-get-image.results.value)
            cluster-name: $(params.cluster)
            dev-region: $(params.cluster-region)
            dev-cluster-namespace: $(params.cluster-namespace)

    - name: prod-acceptance-tests-config
      taskRef:
        name: parse-config
      runAfter:
        - prod-deployment
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: stage
          value: acceptance-test
        - name: file
          value: $(tasks.prod-clone-repo.results.directory-name)/$(params.one-pipeline-config)

    - name: prod-acceptance-tests
      runAfter:
        - prod-deployment
      taskRef:
        name: run-stage
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: image
          value: $(tasks.prod-acceptance-tests-config.results.image)
        - name: script
          value: $(tasks.prod-acceptance-tests-config.results.script)
        - name: working-dir
          value: $(tasks.prod-clone-repo.results.directory-name)
        - name: configmap-0
          value: $(tasks.prod-acceptance-tests-config.results.configmap-0)
        - name: configmap-1
          value: $(tasks.prod-acceptance-tests-config.results.configmap-1)
        - name: configmap-2
          value: $(tasks.prod-acceptance-tests-config.results.configmap-2)
        - name: configmap-3
          value: $(tasks.prod-acceptance-tests-config.results.configmap-3)
        - name: configmap-4
          value: $(tasks.prod-acceptance-tests-config.results.configmap-4)
        - name: secret-0
          value: $(tasks.prod-acceptance-tests-config.results.secret-0)
        - name: secret-1
          value: $(tasks.prod-acceptance-tests-config.results.secret-1)
        - name: secret-2
          value: $(tasks.prod-acceptance-tests-config.results.secret-2)
        - name: secret-3
          value: $(tasks.prod-acceptance-tests-config.results.secret-3)
        - name: secret-4
          value: $(tasks.prod-acceptance-tests-config.results.secret-4)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-acceptance-tests-create-doi-data
      runAfter:
        - prod-acceptance-tests
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "Acceptance tests"
        - name: task-name
          value: "prod-acceptance-tests"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.prod-acceptance-tests.results.status)
        - name: toolchain-id
          value: $(params.doi-toolchain-id)
        - name: ibmcloud-api-key-secret-key
          value: "ibmcloud-api-key"

    - name: prod-acceptance-tests-results-to-doi
      runAfter:
        - prod-acceptance-tests-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: $(params.application)
        - name: file-locations
          value: $(tasks.prod-acceptance-tests-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.prod-acceptance-tests-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "ibmcloud-api-key"
        - name: toolchain-id
          value: $(params.doi-toolchain-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-publish-deployrecord
      taskRef:
        name: doi-publish-deployrecord
      runAfter:
        - prod-deployment
        - prod-inventory-get-build-number
      params:
        - name: app-name
          value: "$(params.application)"
        - name: toolchain-id
          value: "$(params.doi-toolchain-id)"
        - name: build-number
          value: "$(tasks.prod-inventory-get-build-number.results.value)"
        - name: environment
          value: "prod"
        - name: app-url
          value: "http://example.com" # TODO: get app URL from deployment
        - name: pipeline-debug
          value: "$(params.pipeline-debug)"
        - name: toolchain-apikey-secret-key
          value: "ibmcloud-api-key"

    - name: prod-compliance-collector
      taskRef:
        name: compliance-collector
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: namespace
          value: cd
        - name: incident-issue-repo
          value: $(tasks.prod-extract-incident-issues-url.results.extracted-value)
        - name: evidence-repo-url
          value: $(tasks.setup.results.evidence-locker-url)
        - name: commit-hash
          value: $(tasks.prod-inventory-get-commit.results.value)
        - name: toolchain-crn
          value: $(tasks.prod-get-toolchain-crn.results.extracted-value)
        - name: cos-bucket-name
          value: "$(params.cos-bucket-name)"
        - name: cos-endpoint
          value: "$(params.cos-endpoint)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: toolchain-apikey-secret-key
          value: "ibmcloud-api-key"
        - name: skip-pipeline-logs
          value: "1"
        - name: data
          value: |
            [
              {
                "name": "acceptance-test",
                "step": "",
                "evidence_type": "com.ibm.acceptance_test",
                "evidence_type_version": "1.0.0",
                "expected": "success",
                "actual": "$(tasks.prod-acceptance-tests.results.status)",
                "artifacts": [
                ]
              },
              {
                "name": "create-change-request",
                "step": "",
                "evidence_type": "com.ibm.create_change_request",
                "evidence_type_version": "1.0.0",
                "expected": "success",
                "actual": "$(tasks.prod-change-request-create.results.status)",
                "artifacts": [
                ]
              },
              {
                "name": "change-request-check-approval",
                "step": "",
                "evidence_type": "com.ibm.change-request-check-approval",
                "evidence_type_version": "1.0.0",
                "expected": "success",
                "actual": "$(tasks.prod-change-request-check-approval.results.status)",
                "artifacts": [
                ]
              },
              {
                "name": "change-request-change-state-to-implement",
                "step": "",
                "evidence_type": "com.ibm.change_request_change_state_to_implement",
                "evidence_type_version": "1.0.0",
                "expected": "success",
                "actual": "$(tasks.prod-change-request-change-state-to-implement.results.status)",
                "artifacts": [
                ]
              }
            ]

    - name: prod-compliance-doi-reporter
      taskRef:
        name: compliance-doi-reporter
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: "$(params.application)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: toolchain-id
          value: "$(params.doi-toolchain-id)"
        - name: ibmcloud-api-key-secret-key
          value: "ibmcloud-api-key"
        - name: data
          value: |
            [
              {
                "name": "prod-acceptance-tests",
                "step": "",
                "evidence_type": "com.ibm.acceptance_test",
                "expected": "success",
                "actual": "$(tasks.prod-acceptance-tests.results.status)"
              },
            ]

    - name: prod-change-request-close-get-evidence-summary
      taskRef:
        name: evidence-summarize
      runAfter:
        - prod-compliance-collector
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: path-list
          value:
            |
            ci/$(tasks.prod-inventory-get-evidence-path.results.value)
            cd/$(tasks.setup.results.pipeline-run-id)
        - name: toolchain-crn
          value: $(tasks.prod-get-toolchain-crn.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-change-request-close-format-summary
      runAfter:
        - prod-change-request-close-get-evidence-summary
      taskRef:
        name: evidence-summary-format
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: summary-path
          value: $(tasks.prod-change-request-close-get-evidence-summary.results.summary-path)

    - name: prod-evidence-summary-upload
      taskRef:
        name: evidence-upload-summary
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.prod-get-evidence-locker-path.results.extracted-value)
        - name: evidence-summary-path
          value: "$(tasks.prod-change-request-close-get-evidence-summary.results.summary-path)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-inventory-merge-change-request-branch
      taskRef:
        name: inventory-apply
      runAfter:
        - prod-deployment
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: inventory-folder
          value: $(tasks.prod-clone-inventory-repo.results.directory-name)

    - name: prod-close-change-request
      taskRef:
        name: servicenow-close-change-request
      runAfter:
        - prod-inventory-merge-change-request-branch
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: dynamic-secrets
          workspace: artifacts
      params:
        - name: close-category-script
          value:
            |
            #!/bin/bash
            CLOSE_CATEGORY="successful"

            if [ "$(tasks.prod-change-request-close-get-evidence-summary.results.failure-count)" -gt 0 ]; then
              CLOSE_CATEGORY="successful_issues"
            fi

            echo -n "$CLOSE_CATEGORY"

        - name: close-notes-script
          value:
            |
            #!/bin/bash

            CLOSE_ISSUES=""
            if [ "$(tasks.prod-change-request-close-get-evidence-summary.results.failure-count)" -gt 0 ]; then
              CLOSE_ISSUES="but some checks failed during build or deployment. See summary for more details!"
            fi

            SUMMARY="$(cat ./$(tasks.prod-change-request-close-format-summary.results.formatted-summary-path))"

            printf "Deployed successful %s\n\nUPDATED EVIDENCE SUMMARY: \n\n%s" "$CLOSE_ISSUES" "$SUMMARY"

        - name: servicenow-api-url
          value: $(tasks.prod-change-request-create-urls.results.servicenow-api-url)
        - name: change-request-id
          value: $(tasks.prod-change-request-create.results.change-request-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: prod-compliance-close-cr
      taskRef:
        name: compliance-collector
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: namespace
          value: cd
        - name: incident-issue-repo
          value: $(tasks.prod-extract-incident-issues-url.results.extracted-value)
        - name: evidence-repo-url
          value: $(tasks.setup.results.evidence-locker-url)
        - name: commit-hash
          value: $(tasks.prod-inventory-get-commit.results.value)
        - name: toolchain-crn
          value: $(tasks.prod-get-toolchain-crn.results.extracted-value)
        - name: cos-bucket-name
          value: "$(params.cos-bucket-name)"
        - name: cos-endpoint
          value: "$(params.cos-endpoint)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: toolchain-apikey-secret-key
          value: "ibmcloud-api-key"
        - name: data
          value: |
            [
              {
                "name": "close-change-request",
                "step": "",
                "evidence_type": "com.ibm.close_change_request",
                "evidence_type_version": "1.0.0",
                "expected": "success",
                "actual": "$(tasks.prod-close-change-request.results.status)",
                "artifacts": [
                ]
              }
            ]

    - name: prod-notify-pipeline-end
      when:
        - input: "$(params.slack-notifications)"
          operator: in
          values: ["1"]
      taskRef:
        name: slack-post-message
      runAfter:
        - prod-close-change-request
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3
              import os
              print("CD Pipeline finished!")
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + "|See the Pipeline Logs>")

    - name: prod-pipeline-evaluator
      runAfter:
        - prod-compliance-close-cr
      taskRef:
        name: pipeline-evaluate
      params:
        - name: results
          value: |
            [
              {
                "name": "prod-close-change-request",
                "expected": "success",
                "actual": "$(tasks.prod-close-change-request.results.status)"
              },
              {
                "name": "prod-acceptance-tests",
                "expected": "success",
                "actual": "$(tasks.prod-acceptance-tests.results.status)"
              },
              {
                "name": "prod-change-request-create",
                "expected": "success",
                "actual": "$(tasks.prod-change-request-create.results.status)"
              },
              {
                "name": "prod-change-request-check-approval",
                "expected": "success",
                "actual": "$(tasks.prod-change-request-check-approval.results.status)"
              },
              {
                "name": "prod-change-request-change-state-to-implement",
                "expected": "success",
                "actual": "$(tasks.prod-change-request-change-state-to-implement.results.status)"
              }
            ]
