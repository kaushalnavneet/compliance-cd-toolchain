---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-get-credentials
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/git/README.md
  labels:
    app.kubernetes.io/version: "1.1.1"
spec:
  params:
    - name: repository
      description: the git repo url
    - name: ibmcloud-api
      description: ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: repository-integration
      description: the repo integration name
      default: ""
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
    - name: git-api-token-key
      description: git api token secret name
      default: "git-token"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: ibmcloud-api-key-secret-key
      description: the IBM Cloud API key from secrets
      default: "ibmcloud-api-key"
    - name: retry-count
      description: retry count to get fetch token
      default: "5"
    - name: retry-delay
      description: the amount of seconds between the retries
      default: "5"

  results:
    - name: repository
      description: the git repo url with the .git suffix
    - name: git-auth-user
      description: git user depending on the service type user for authentication
    - name: repo-name
      description: the repository name, from the url

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: fetch-git-token
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.9@sha256:2976e1374e87f5cddabcf80179d9708868d52dbf656fdde60f803553be633db2
      workingDir: "/artifacts"
      env:
        - name: HOME
          value: "/root"
        - name: API_ENDPOINT
          value: $(params.ibmcloud-api)
        - name: REPOSITORY
          value: $(params.repository)
      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $PIPELINE_DEBUG == 1 ]; then
          pwd
          env
          trap env EXIT
          set -x
        fi

        TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)

        if [[ ! -z  "$(params.repository-integration)" ]];
        then
          REPOSITORY=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.services[]  |
          select(.toolchain_binding.name == "$(params.repository-integration)") | .parameters.repo_url')
        fi

        REPO_NAME=$(echo ${REPOSITORY} | sed -e "s|.*/||"  -e "s/.git//")

        if [[ "$REPOSITORY" != *.git ]]; then
          echo "Adding .git suffix to Repository URL"
          REPOSITORY="${REPOSITORY}.git"
        fi

        GIT_SERVICE_TYPE=$(echo ${TOOLCHAIN_CONFIG} | jq -r \
          --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .service_id')

        GIT_TOKEN=""

        if [ -f /secrets/$(params.git-api-token-key) ]; then
          GIT_TOKEN=$(cat /secrets/$(params.git-api-token-key))
        fi

        if [[ -z "$GIT_TOKEN" ]]; then

          TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' | awk -F: '{print $3}')
          TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')
          REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')

          API_KEY=$(cat /secrets/$(params.ibmcloud-api-key-secret-key))

          echo "Fetching token for $REPOSITORY"
          fetch_token() {
            ibmcloud config --check-version false
            ibmcloud login -a $API_ENDPOINT -r $TOOLCHAIN_REGION --apikey $API_KEY
            TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
          }

          source /scripts/retry_command.sh
          retry $(params.retry-count) $(params.retry-delay) fetch_token
          exit_code=$?

          if [ $exit_code -ne 0 ]; then
            echo "Error fetching the git access token."
            exit $exit_code
          fi

          echo "Doing curl ${API_ENDPOINT}/devops/toolchains/${TOOLCHAIN_ID}?env_id=${REGION_ID}"
          curl -s -X GET -o _toolchain.json -H "Accept: application/json" \
            -H "Authorization: $TOKEN" "${API_ENDPOINT}/devops/toolchains/${TOOLCHAIN_ID}?env_id=${REGION_ID}"
          if jq '.services' _toolchain.json > /dev/null 2>&1; then
            echo "Found toolchain with id $TOOLCHAIN_ID in region $REGION_ID"
          else
            echo "Toolchain with id $TOOLCHAIN_ID in region $REGION_ID not found"
            exit 1
          fi

          GIT_SERVICE_INSTANCE_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r \
            --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id')
          if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
            echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
            exit 1
          fi

          GIT_TOKEN_URL=$(echo ${TOOLCHAIN_CONFIG} | jq -r \
            --arg git_repo "$REPOSITORY" \
            '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url')

          GIT_TOKEN=$(curl -s -X GET -H "Accept: application/json" \
            -H "Authorization: $TOKEN" \
            "${GIT_TOKEN_URL}?toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"\
            | jq -r '.access_token')
        fi

        if [[ -z "$GIT_TOKEN" ]] || [[ "$GIT_TOKEN" = "null" ]]; then
          echo "Error fetching the git access token."
          exit 1
        fi

        if [ "$GIT_SERVICE_TYPE" == "github" ]; then
          GIT_AUTH_USER="x-oauth-basic"
        elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
          GIT_AUTH_USER="x-oauth-basic"
        elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
          GIT_AUTH_USER="oauth2"
        elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
          GIT_AUTH_USER="oauth2"
        elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
          GIT_AUTH_USER="x-token-auth"
        else
          GIT_AUTH_USER="x-token-auth"
        fi;

        echo -n $REPOSITORY > $(results.repository.path)
        echo -n $GIT_AUTH_USER > $(results.git-auth-user.path)
        echo -n $REPO_NAME > $(results.repo-name.path)
        echo -n $GIT_TOKEN > /dynamic-secrets/$(params.git-api-token-key)
      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /secrets
          name: secrets
        - mountPath: /scripts
          name: retry-command

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /dynamic-secrets

  volumes:
    - name: config-volume
      configMap:
        name: toolchain
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: retry-command
      configMap:
        name: retry-command
        items:
          - key: retry_command.sh
            path: retry_command.sh
