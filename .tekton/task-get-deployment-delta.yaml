---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-deployment-delta
spec:
  params:
    - name: target-environment
    - name: inventory-folder
      description: directory name where the inventory located
    - name: git-api-token-key
      default: "git-token"
    - name: pipeline-debug
      default: "0"

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets

  results:
    - name: deployment-delta-list-path
    - name: inventory-entries-list-path

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: calculate
      image: ibmcom/pipeline-base-image:2.9
      workingDir: $(workspaces.artifacts.path)
      script: |
        #!/bin/bash

        if [ $PIPELINE_DEBUG = 1 ]; then
          pwd
          env
          trap env EXIT
          set -x
        fi

        list_entries () {
          git checkout $1 > /dev/null
          for app_name in *; do
            if [[ "$app_name" != *.md ]]; then
              echo "$app_name"
            fi
          done
        }

        GIT_TOKEN=$(cat "/secrets/$(params.git-api-token-key)")

        git config --global user.email "tekton@example.com"
        git config --global user.name "Tekton"

        git clone https://"$GIT_TOKEN"@github.ibm.com/cocoa/inventory-script.git
        export PATH="$(pwd)/inventory-script:$PATH"

        cd /artifacts/"$(params.inventory-folder)"

        TARGET_ENVIRONMENT="$(params.target-environment)"
        TARGET_CANDIDATE="${TARGET_ENVIRONMENT}_candidate"

        DELTA="$(inventory diff $TARGET_CANDIDATE $TARGET_ENVIRONMENT)"
        ENTRIES=$(list_entries $TARGET_CANDIDATE)

        if [[ $DELTA == $ENTRIES && $DELTA == "*" ]]; then
          echo "Error: Inventory target and source are both empty. Please make sure to merge the promotion PR in the Inventory before running this pipeline."
          exit 1
        fi

        cd $(workspaces.artifacts.path)

        #
        # write all inventory entry names that are actually being deployed in this run to a JSON array
        #

        delta_json="[]"

        while IFS= read -r line; do
          delta_json=$(echo "$delta_json" | jq -c --arg element "$line" '. + [$element]')
        done <<< "$DELTA"

        echo -n "$delta_json" > "./deployment-delta-list.json"

        echo "Changed entries in inventory since last deployment:"
        cat ./deployment-delta-list.json | jq '.'

        #
        # write all inventory entry names in a JSON array
        #

        entries_json="[]"

        while IFS= read -r line; do
        entries_json=$(echo "$entries_json" | jq -c --arg element "$line" '. + [$element]')
        done <<< "$ENTRIES"

        echo -n "$entries_json" > "./inventory-entries-list.json"

        echo ""
        echo "Inventory entries: "
        cat ./inventory-entries-list.json | jq '.'

        echo -n "deployment-delta-list.json" > $(results.deployment-delta-list-path.path)
        echo -n "inventory-entries-list.json" > $(results.inventory-entries-list-path.path)
