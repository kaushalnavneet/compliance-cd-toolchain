---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-deployment-delta
spec:
  params:
    - name: target-environment
    - name: inventory-url
    - name: inventory-folder
      description: directory name where the inventory located
    - name: git-api-token-key
      default: "git-token"
    - name: pipeline-debug
      default: "0"

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets

  results:
    - name: deployment-delta-list-path
    - name: inventory-entries-list-path

  stepTemplate:
    env:
      - name: INVENTORY_URL
        value: $(params.inventory-url)
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
  steps:
    - name: calculate
      image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/ibm-compliance-automation:1.1.8@sha256:de2d767a5295334959955b39a681cb78e103addd09c3d6c311fa53ad724fcaea
      workingDir: $(workspaces.artifacts.path)/$(params.inventory-folder)
      script: |
        #!/bin/bash

        if [ $PIPELINE_DEBUG = 1 ]; then
          pwd
          env
          trap env EXIT
          set -x
        fi

        apk upgrade --no-cache && \
          apk add --no-cache \
          git

        export GHE_TOKEN=$(cat "/secrets/$(params.git-api-token-key)")

        GHE_REPO=$(echo "$INVENTORY_URL" | cut -f5 -d/)
        GHE_ORG=$(echo "$INVENTORY_URL" | cut -f4 -d/)

        git config --global user.email "tekton@example.com"
        git config --global user.name "Tekton"

        list_entries () {
          git checkout $1 > /dev/null
          for app_name in $(find -P . -mindepth 1 -type f -not -path '*/\.*' -type f); do
              if [[ -f "$app_name" ]] && [[ "$app_name" != *.md ]]; then
                  echo "${app_name/.\//}"
              fi
          done
        }

        diff() {
          local commit_first="$1"
          local commit_second="$2"

          if [ -n "$commit_second" ]; then
            git diff --name-only "$commit_first" "$commit_second"
          else
            git checkout $commit_first > /dev/null
            for app_name in $(find -P . -mindepth 1 -type f -not -path '*/\.*' -type f); do
                if [[ -f "$app_name" ]] && [[ "$app_name" != *.md ]]; then
                    echo "${app_name/.\//}"
                fi
            done
          fi
        }

        CURRENT_DEPLOYMENT=$(cocoa inventory get-sha \
          --org="${GHE_ORG}" \
          --repo="${GHE_REPO}" \
          --label="${PIPELINE_RUN_ID}")

        PREVIOUS_DEPLOYMENT=$(cocoa inventory get-sha \
          --org="${GHE_ORG}" \
          --repo="${GHE_REPO}" \
          --label="$(params.target-environment)_latest")

        DELTA="$(diff $CURRENT_DEPLOYMENT $PREVIOUS_DEPLOYMENT)"
        ENTRIES=$(list_entries $CURRENT_DEPLOYMENT)

        if [[ $DELTA == $ENTRIES && $DELTA == "*" ]]; then
          echo "Error: Inventory target and source are both empty. Please make sure to merge the promotion PR in the Inventory before running this pipeline."
          exit 1
        fi

        cd $(workspaces.artifacts.path)

        #
        # write all inventory entry names that are actually being deployed in this run to a JSON array
        #

        delta_json="[]"

        while IFS= read -r line; do
          if [ -n "$line" ]; then
            delta_json=$(echo "$delta_json" | jq -c --arg element $line '. + [$element]')
          fi
        done <<< "$DELTA"

        echo -n "$delta_json" > "./deployment-delta-list.json"

        echo "Changed entries in inventory since last deployment:"
        cat ./deployment-delta-list.json | jq '.'

        #
        # write all inventory entry names in a JSON array
        #

        entries_json="[]"

        while IFS= read -r line; do
          if [ -n "$line" ]; then
            entries_json=$(echo "$entries_json" | jq -c --arg element "$line" '. + [$element]')
          fi
        done <<< "$ENTRIES"

        echo -n "$entries_json" > "./inventory-entries-list.json"

        echo ""
        echo "Inventory entries: "
        cat ./inventory-entries-list.json | jq '.'

        echo -n "deployment-delta-list.json" > $(results.deployment-delta-list-path.path)
        echo -n "inventory-entries-list.json" > $(results.inventory-entries-list-path.path)
