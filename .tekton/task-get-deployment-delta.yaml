---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-deployment-delta
spec:
  params:
    - name: target-environment
    - name: inventory-url
    - name: inventory-folder
      description: directory name where the inventory located
    - name: git-api-token-key
      default: "git-token"
    - name: change-request-id
    - name: pipeline-debug
      default: "0"

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets

  results:
    - name: deployment-delta-list-path
    - name: inventory-entries-list-path

  stepTemplate:
    env:
      - name: INVENTORY_URL
        value: $(params.inventory-url)
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
  steps:
    - name: calculate
      image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/ibm-compliance-automation:1.2.2@sha256:f3b00fe152508501fc4712e72ba74668ef0f52d2a665045a95b0b2da95728441
      workingDir: $(workspaces.artifacts.path)/$(params.inventory-folder)
      script: |
        #!/bin/bash

        if [ $PIPELINE_DEBUG = 1 ]; then
          pwd
          env
          trap env EXIT
          set -x
        fi

        apk upgrade --no-cache && \
          apk add --no-cache \
          git

        export GHE_TOKEN=$(cat "/secrets/$(params.git-api-token-key)")

        GHE_REPO=$(echo "$INVENTORY_URL" | cut -f5 -d/)
        GHE_ORG=$(echo "$INVENTORY_URL" | cut -f4 -d/)

        git config --global user.email "tekton@example.com"
        git config --global user.name "Tekton"

        list_entries () {
          git checkout "$1" > /dev/null

          while IFS= read -r app_name; do
            echo "${app_name//.\//}"
          done <<< "$(find -P . -mindepth 1 -type f -not -path '*/\.*' -not -path '*.md' -type f)"
        }

        diff() {
          local commit_first="$1"
          local commit_second="$2"

          if [ -n "$commit_second" ]; then
            git diff --name-only --diff-filter=d "$commit_second" "$commit_first"  | awk '!/\.md$/ && !/^\./'
          else
            git checkout "$commit_first" > /dev/null
            local IFS=
            while read -r app_name; do
              echo "${app_name//.\//}"
            done <<< "$(find -P . -mindepth 1 -type f -not -path '*/\.*' -not -path '*.md' -type f)"
          fi
        }

        CURRENT_DEPLOYMENT=$(cocoa inventory get-sha \
          --org="${GHE_ORG}" \
          --repo="${GHE_REPO}" \
          --label="${PIPELINE_RUN_ID}")

        PREVIOUS_DEPLOYMENT=$(cocoa inventory get-sha \
          --org="${GHE_ORG}" \
          --repo="${GHE_REPO}" \
          --label="$(params.target-environment)_latest")

        DELTA="$(diff $CURRENT_DEPLOYMENT $PREVIOUS_DEPLOYMENT)"
        ENTRIES=$(list_entries $CURRENT_DEPLOYMENT)

        if [[ $DELTA == $ENTRIES && $DELTA == "*" ]]; then
          echo "Error: Inventory target and source are both empty. Please make sure to merge the promotion PR in the Inventory before running this pipeline."
          exit 1
        fi

        cd $(workspaces.artifacts.path)

        #
        # write all inventory entry names that are actually being deployed in this run to a JSON array
        #

        delta_json="[]"

        while IFS= read -r line; do
          if [ -n "$line" ]; then
            delta_json=$(echo "$delta_json" | jq -c --arg element $line '. + [$element]')
          fi
        done <<< "$DELTA"

        if [ "$delta_json" = "[]" ] && [[ "$(params.change-request-id)" = "notAvailable"  || -z "$(params.change-request-id)" ]]; then
          echo -e "There is no code change detected, therefore no Change Request can be made.\nTo run the CD successfully, please make sure the promotion pull request is merged or provide an existing Change Request ID."
          exit 1
        fi

        echo -n "$delta_json" > "./deployment-delta-list.json"

        echo "Changed entries in inventory since last deployment:"
        cat ./deployment-delta-list.json | jq '.'

        #
        # write all inventory entry names in a JSON array
        #

        entries_json="[]"

        while IFS= read -r line; do
          if [ -n "$line" ]; then
            entries_json=$(echo "$entries_json" | jq -c --arg element "$line" '. + [$element]')
          fi
        done <<< "$ENTRIES"

        echo -n "$entries_json" > "./inventory-entries-list.json"

        echo ""
        echo "Inventory entries: "
        cat ./inventory-entries-list.json | jq '.'

        echo -n "deployment-delta-list.json" > $(results.deployment-delta-list-path.path)
        echo -n "inventory-entries-list.json" > $(results.inventory-entries-list-path.path)
