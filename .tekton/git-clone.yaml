---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/git/README.md
  labels:
    app.kubernetes.io/version: "1.0.2"
spec:
  params:
    - name: repository
      description: the git repo url
    - name: branch
      description: the branch for the git repo
      default: "master"
    - name: origin
      description: origin to merge the code with
      default: ""
    - name: revision
      description: The git revision/commit to clone empty to just use branch
      default: ""
    - name: directory-name
      description: Directory to clone into in the workspace
      default: ""
    - name: git-user
      description: Github user for the clone
    - name: git-api-token-key
      description: The name of the secret in the workspace
      default: "git-token"
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"

  results:
    - name: git-url
      description: the clone url
    - name: git-branch
      description: the git branch
    - name: git-commit
      description: the latest commit of the cloned repo
    - name: directory-name
      description: the name of the folder where the repo was cloned

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: clone-repo
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.9@sha256:2976e1374e87f5cddabcf80179d9708868d52dbf656fdde60f803553be633db2
      workingDir: "/artifacts"
      env:
        - name: REPOSITORY_PARAMETER
          value: $(params.repository)
        - name: GIT_BRANCH
          value: $(params.branch)
        - name: ORIGIN
          value: $(params.origin)
        - name: REVISION
          value: $(params.revision)
        - name: DIRECTORY_NAME
          value: $(params.directory-name)
      script: |
        #!/bin/bash
        set -e pipefail

        if [ $PIPELINE_DEBUG == 1 ]; then
            pwd
            env
            trap env EXIT
            set -x
        fi

        REPOSITORY=$(params.repository)
        GIT_AUTH_USER=$(params.git-user)
        GIT_TOKEN=$(cat "/secrets/$(params.git-api-token-key)")

        if [[ "${GIT_AUTH_USER}" == "" || "${GIT_TOKEN}" == "" ]]; then
          echo "ERROR: User or token not set"
          echo "Exiting failed!!!"
          exit 1
        fi

        GIT_AUTH_USER=$(echo ${GIT_AUTH_USER} | sed -e "s/@/%40/g")
        GIT_URL=$(echo "${REPOSITORY}" | sed -e "s/:\/\//:\/\/${GIT_AUTH_USER}:${GIT_TOKEN}@/g")

        echo "Cloning ${REPOSITORY}"

        git config --global advice.detachedHead false

        if [[ "${REVISION}" ]]; then
          # check if the branch exists (that may not be the case in case of a pipeline-run re-run)
          echo "Fetching specific -${REVISION}- commit"

          if [[ -z "${GIT_BRANCH}" ]]; then
            # No branch provided
            GIT_ERROR=$(git clone -q -n $GIT_URL $DIRECTORY_NAME 2>&1 || true )
          elif git ls-remote --heads --exit-code ${GIT_URL} ${GIT_BRANCH} > /dev/null 2>&1; then
            GIT_ERROR=$(git clone -q -b $GIT_BRANCH $GIT_URL $DIRECTORY_NAME 2>&1  || true)
          else
            echo "branch ${GIT_BRANCH} does not exists in ${REPOSITORY}"
            GIT_ERROR=$(git clone -q -n $GIT_URL $DIRECTORY_NAME 2>&1 || true)
          fi
        else
          GIT_ERROR=$(git clone -q -b $GIT_BRANCH $GIT_URL $DIRECTORY_NAME 2>&1 || true)
        fi

        git config --global advice.detachedHead true

        if [[ ! -z "$GIT_ERROR" ]]; then
          echo $GIT_ERROR | sed 's/https:\/\/.*:.*@/https:\/\//g'
          echo ""
          echo "There was an error accessing the repo '$REPOSITORY'."
          echo ""
          echo "It is possible that the Git Token related to the IBM Cloud API key you provided cannot access the repository above."
          echo "Make sure that the owner user of IBM Cloud API key has access to the repository."
          echo "Possible solutions:"
          echo " - Provide access for the owner user of IBM Cloud API key to the repository '$REPOSITORY'"
          echo " - Update the IBM Cloud API key for the pipeline"

          exit 1
        fi

        if [[ -z "${DIRECTORY_NAME}" ]]; then
          # Find the "humanish" part of the git source repository that corresponds to the clone directory
          # REPOSITORY contains the repository url with .git suffix
          DIRECTORY_NAME=$(basename "${REPOSITORY##*/}" .git)
        fi
        current_dir=$(pwd)
        cd $DIRECTORY_NAME

        if [[ "${REVISION}" != "" ]]; then
          # Point the HEAD to the specific revision
          git checkout -q ${REVISION}
        fi
        echo "Origin: ${ORIGIN}"
        if [[ "${ORIGIN}" != "" ]]; then
          git config --global user.email "tekton@example.com"
          git config --global user.name "Tekton"
          git merge origin/${ORIGIN}
        fi
        GIT_COMMIT=$(git show-ref --head | head -n1 | awk '{print $1}')
        cd $current_dir
        echo "git clone of ${REPOSITORY} (branch ${GIT_BRANCH} Commit ${GIT_COMMIT}) done to directory ${DIRECTORY_NAME}"

        ls

        echo -n $REPOSITORY > $(results.git-url.path)
        echo -n $GIT_BRANCH > $(results.git-branch.path)
        echo -n $GIT_COMMIT > $(results.git-commit.path)
        echo -n $DIRECTORY_NAME > $(results.directory-name.path)
